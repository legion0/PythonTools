#!/usr/bin/python
import argparse
import os
import sys

from json import loads as json_loads
from kjlib.debugtools import die
from kjlib.logger import Logger
from termcolor import colored
from datetime import datetime

def parse_args(log_level_choices):
	parser = argparse.ArgumentParser(description='Reader for the log files generated by the kjlib logging modules')
	parser.add_argument("log_file", metavar='<log file>')
	parser.add_argument("-l", "--log-level", choices=log_level_choices, default="INFO")
	
	args = parser.parse_args()
	return args

__TIME_FORMAT = "%Y/%m/%d %H:%M:%S.%f"

def main():
	log_level_choices = Logger._LOG_LEVEL_TO_STRING.values()
	max_log_level_width = max([len(x) for x in log_level_choices])
	
	args = parse_args(log_level_choices)
	log_file = args.log_file
	max_log_level = Logger._LOG_LEVEL_STRING_TO_VALUE[args.log_level]
	
	if not os.path.isfile(log_file):
		die("%r is not a file path" % log_file)
	line_number = 0
	with open(log_file) as f:
		while True:
			msg = read_log_msg(f, line_number)
			line_number += 1
			if msg is None:
				break
			log_level = msg["level"]
			if log_level <= max_log_level:
				log_color = log_level_to_log_color(log_level)
				level_str = msg["level_str"]
				level_str = level_str + (" " * (max_log_level_width - len(level_str)))
				time_str = datetime.fromtimestamp(msg["time"]).strftime(__TIME_FORMAT)
				print time_str,\
				      colored("%s:" % level_str, log_color),\
				      msg["msg_text"],\
				      "{%s}" % msg["module_name"],\
				      "<%s>" % msg["function_name"]

def read_log_msg(f, line_number):
	line_text = f.readline()
	log_msg = None
	if line_text != "":
		try:
			log_msg = json_loads(line_text)
		except ValueError:
			die("illegal json at line %r" % line_number)
	return log_msg

def log_level_to_log_color(log_level):
	# red, green, yellow, blue, magenta, cyan, white
	if log_level == Logger.FATAL:
		return "red"
	elif log_level == Logger.ERROR:
		return "red"
	elif log_level == Logger.WARN:
		return "yellow"
	elif log_level == Logger.INFO:
		return "green"
	elif log_level == Logger.VERBOSE:
		return "cyan"
	elif log_level == Logger.DEBUG:
		return "blue"
	elif log_level == Logger.DEBUG2:
		return "magenta"
	else:
		return "white"

if __name__ == "__main__":
	sys.argv.extend(["/home/legion/.logs/logger/log", "-l", "DEBUG3"])
	main()
